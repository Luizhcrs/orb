#!/usr/bin/env python3
"""
Gerenciador de Servi√ßo ORB Backend
Script para controlar o servi√ßo Windows (iniciar, parar, status)
"""

import sys
import os

# Adiciona o diret√≥rio src ao path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'src'))

def check_requirements():
    """Verifica se os requisitos est√£o instalados"""
    try:
        import win32serviceutil
        print("‚úÖ pywin32 est√° instalado")
        return True
    except ImportError:
        print("‚ùå pywin32 n√£o est√° instalado")
        print("Execute: pip install pywin32")
        return False

def show_menu():
    """Mostra menu de op√ß√µes"""
    print("\nüîß Gerenciador do ORB Backend Service")
    print("=" * 50)
    print("1. Ver status do servi√ßo")
    print("2. Iniciar servi√ßo")
    print("3. Parar servi√ßo")
    print("4. Reiniciar servi√ßo")
    print("5. Ver logs do Event Viewer")
    print("6. Testar API")
    print("0. Sair")
    print("=" * 50)

def get_status():
    """Obt√©m status do servi√ßo"""
    try:
        from services.windows_service import get_service_status
        get_service_status()
    except Exception as e:
        print(f"‚ùå Erro ao obter status: {str(e)}")

def start_service():
    """Inicia o servi√ßo"""
    try:
        from services.windows_service import start_service
        if start_service():
            print("‚úÖ Servi√ßo iniciado com sucesso!")
            print("üåê API dispon√≠vel em: http://localhost:8000")
            print("üìö Documenta√ß√£o: http://localhost:8000/docs")
        else:
            print("‚ùå Falha ao iniciar servi√ßo")
    except Exception as e:
        print(f"‚ùå Erro ao iniciar servi√ßo: {str(e)}")

def stop_service():
    """Para o servi√ßo"""
    try:
        from services.windows_service import stop_service
        if stop_service():
            print("‚úÖ Servi√ßo parado com sucesso!")
        else:
            print("‚ùå Falha ao parar servi√ßo")
    except Exception as e:
        print(f"‚ùå Erro ao parar servi√ßo: {str(e)}")

def restart_service():
    """Reinicia o servi√ßo"""
    print("üîÑ Reiniciando servi√ßo...")
    stop_service()
    import time
    time.sleep(2)
    start_service()

def show_event_log_instructions():
    """Mostra instru√ß√µes para ver logs no Event Viewer"""
    print("\nüìã Como ver logs no Event Viewer:")
    print("1. Pressione Win + R")
    print("2. Digite: eventvwr.msc")
    print("3. Navegue para: Windows Logs > Application")
    print("4. Procure por eventos com fonte 'ORB Backend'")
    print("5. Ou use o filtro: Origem = 'ORB Backend'")

def test_api():
    """Testa se a API est√° respondendo"""
    import requests
    try:
        response = requests.get("http://localhost:8000/health/", timeout=5)
        if response.status_code == 200:
            print("‚úÖ API est√° respondendo!")
            data = response.json()
            print(f"   Status: {data.get('status', 'unknown')}")
            print(f"   Vers√£o: {data.get('version', 'unknown')}")
        else:
            print(f"‚ùå API retornou status: {response.status_code}")
    except requests.exceptions.ConnectionError:
        print("‚ùå API n√£o est√° respondendo - servi√ßo pode estar parado")
    except Exception as e:
        print(f"‚ùå Erro ao testar API: {str(e)}")

def main():
    """Fun√ß√£o principal"""
    # Verifica requisitos
    if not check_requirements():
        sys.exit(1)
    
    while True:
        show_menu()
        
        try:
            choice = input("\nEscolha uma op√ß√£o: ").strip()
            
            if choice == "0":
                print("üëã At√© logo!")
                break
            elif choice == "1":
                get_status()
            elif choice == "2":
                start_service()
            elif choice == "3":
                stop_service()
            elif choice == "4":
                restart_service()
            elif choice == "5":
                show_event_log_instructions()
            elif choice == "6":
                test_api()
            else:
                print("‚ùå Op√ß√£o inv√°lida")
            
            input("\nPressione Enter para continuar...")
            
        except KeyboardInterrupt:
            print("\nüëã At√© logo!")
            break
        except Exception as e:
            print(f"‚ùå Erro: {str(e)}")
            input("\nPressione Enter para continuar...")

if __name__ == "__main__":
    main()
